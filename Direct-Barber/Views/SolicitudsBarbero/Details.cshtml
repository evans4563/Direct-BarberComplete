@model Direct_Barber.Models.Solicitud

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="d-none">Details</h1> <!-- Ocultamos el h1 para no interferir con el diseño -->

<div class="main-container">
    <!-- Panel emergente de la izquierda -->
    <div id="side-panel" class="side-panel">
        <div class="side-panel-content">
            <h4 class="text-center mb-4">Solicitud</h4>
            <dl class="dl-horizontal">
                <div class="row">
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.Dirección)
                    </dt>
                    <dd class="col-sm-8">
                        @Html.DisplayFor(model => model.Dirección)
                    </dd>
                </div>
                <div class="row">
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.Fecha)
                    </dt>
                    <dd class="col-sm-8">
                        @Html.DisplayFor(model => model.Fecha)
                    </dd>
                </div>
                <div class="row">
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.Descripcion)
                    </dt>
                    <dd class="col-sm-8">
                        @Html.DisplayFor(model => model.Descripcion)
                    </dd>
                </div>
                <div class="row">
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.Precio)
                    </dt>
                    <dd class="col-sm-8">
                        @Html.DisplayFor(model => model.Precio)
                    </dd>
                </div>
                <div class="row">
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.IdClienteNavigation.Nombre)
                    </dt>
                    <dd class="col-sm-8">
                        @Html.DisplayFor(model => model.IdClienteNavigation.Nombre)
                    </dd>
                </div>
                <div class="row">
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.IdClienteNavigation.Foto)
                    </dt>
                    <dd class="col-sm-8">
                        @if (!string.IsNullOrEmpty(Model.IdClienteNavigation.Foto))
                        {
                        <!-- <img src="@Url.Content(Model.IdClienteNavigation.Foto)" style="width:30px; height:30px; border-radius:50%;" />  -->
                            <img src="@Model.IdClienteNavigation.Foto" alt="Foto del Cliente" style="max-width: 100%; height: auto;" onerror="this.style.display='none';" />

                        }
                        else
                        {
                            <p>No hay foto disponible.</p>
                        }
                    </dd>
                </div>

            </dl>
        </div>
        <a asp-action="Index" class="btn btn-secondary">Volver</a>

        <!-- Formulario para aceptar la solicitud -->
        <form asp-action="Aceptar" method="post" class="mt-3">
            <input type="hidden" name="id" value="@Model.IdSolicitud" />
            <button type="submit" class="btn btn-success">Aceptar</button>
        </form>
    </div>

    <!-- Mapa -->
    <div id="map-container" class="map-container">
        <div id="map"></div>
    </div>
</div>

@section Scripts {
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDk_6YpNpeASBHg_kW6F92G_6YoMacuMH8&libraries=places&callback=initMap"></script>
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script type="text/javascript">
        let map;
        let geocoder;
        let marker;

        function initMap() {
            geocoder = new google.maps.Geocoder();

            // Inicializa el mapa centrado en la dirección de la solicitud
            const direccion = '@Model.Dirección';
            geocoder.geocode({ address: direccion }, function (results, status) {
                if (status === "OK" && results[0]) {
                    const location = results[0].geometry.location;
                    map = new google.maps.Map(document.getElementById("map"), {
                        zoom: 17,
                        center: location,
                    });
                    setMapMarker(location);
                } else {
                    console.error("Geocodificación fallida: " + status);
                }
            });
        }

        // Coloca un marcador en el mapa
        function setMapMarker(location) {
            if (marker) {
                marker.setPosition(location);
            } else {
                marker = new google.maps.Marker({
                    position: location,
                    map: map
                });
            }
        }
    </script>
}

<style>
    .main-container {
        display: flex;
        height: 100vh; /* Asegura que no sea más alto que la ventana */
        overflow: hidden; /* Evita que los elementos internos sobrepasen la ventana */
    }

    .side-panel {
        width: 300px;
        background-color: dimgray;
        padding: 20px;
        box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.5);
        z-index: 2;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 20px; /* Espacio entre los elementos */
    }

    .side-panel-content {
        color: white;
    }

    .dl-horizontal dt {
        font-weight: bold;
    }

    .dl-horizontal dd {
        margin-bottom: 10px;
    }

    .map-container {
        flex-grow: 1;
        overflow: hidden; /* Previene que el mapa crezca fuera de la vista */
    }

    #map {
        width: 100%;
        height: 100vh;
        max-height: 100vh; /* Limita la altura del mapa para que no sobrepase la ventana */
    }

    .btn-success {
        margin-top: 10px;
    }
</style>
