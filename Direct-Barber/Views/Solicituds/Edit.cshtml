@model Direct_Barber.Models.Solicitud

@{
    ViewData["Title"] = "Edit";

    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="d-none">Edit</h1> <!-- Ocultamos el h1 para no interferir con el diseño -->

<div class="main-container">
    <!-- Panel emergente de la izquierda -->
    <div id="side-panel" class="side-panel">
        <div class="side-panel-content">
            <h4 class="text-center mb-4">Solicitud</h4>
            <form asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="IdSolicitud" />

                <div class="form-group">
                    <label asp-for="Dirección" class="control-label"></label>
                    <input asp-for="Dirección" id="direccion-input" class="form-control" />
                    <span asp-validation-for="Dirección" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Fecha" class="control-label"></label>
                    <input asp-for="Fecha" class="form-control" />
                    <span asp-validation-for="Fecha" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Descripcion" class="control-label"></label>
                    <input asp-for="Descripcion" class="form-control" />
                    <span asp-validation-for="Descripcion" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Precio" class="control-label"></label>
                    <input asp-for="Precio" class="form-control" />
                    <span asp-validation-for="Precio" class="text-danger"></span>
                </div>
            </form>
        </div>
        <br />
        <br />

        <input type="submit" value="Guardar Cambios" class="btn btn-primary" />

        <a asp-action="Index" class="btn btn-secondary">Volver</a>
    </div>

    <!-- Mapa -->
    <div id="map-container" class="map-container">
        <div id="map" style="height: 100vh; width: 100%;"></div>
    </div>
</div>

@section Scripts {
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDk_6YpNpeASBHg_kW6F92G_6YoMacuMH8&libraries=places&callback=initMap"></script>
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script type="text/javascript">
        let map;
        let geocoder;
        let autocomplete;
        let marker;

        function initMap() {
            geocoder = new google.maps.Geocoder();

            // Inicializa el mapa centrado en Medellín por defecto
            const defaultLocation = { lat: 6.2442, lng: -75.5812 };
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 17,
                center: defaultLocation,
            });

            const direccionInput = document.getElementById("direccion-input");
            autocomplete = new google.maps.places.Autocomplete(direccionInput);

            // Si hay una dirección existente, intenta geocodificarla
            const direccion = direccionInput.value;
            if (direccion) {
                geocoder.geocode({ address: direccion }, function (results, status) {
                    if (status === "OK" && results[0]) {
                        const location = results[0].geometry.location;
                        map.setCenter(location);
                        setMapMarker(location);
                    } else {
                        console.error("Geocodificación fallida: " + status);
                    }
                });
            }

            // Manejo del autocompletado en el campo de dirección
            autocomplete.addListener('place_changed', function () {
                let place = autocomplete.getPlace();
                if (place.geometry) {
                    setMapMarker(place.geometry.location);
                    map.setCenter(place.geometry.location);
                }
            });

            // Evento de clic en el mapa para obtener la dirección
            map.addListener('click', function (event) {
                const latLng = event.latLng;
                geocodeLatLng(latLng);
            });
        }

        // Coloca un marcador en el mapa
        function setMapMarker(location) {
            if (marker) {
                marker.setPosition(location);
            } else {
                marker = new google.maps.Marker({
                    position: location,
                    map: map
                });
            }
        }

        // Realiza la geocodificación inversa al hacer clic en el mapa
        function geocodeLatLng(latLng) {
            geocoder.geocode({ location: latLng }, function (results, status) {
                if (status === "OK") {
                    if (results[0]) {
                        // Coloca la dirección en el input
                        document.getElementById('direccion-input').value = results[0].formatted_address;
                        // Coloca un marcador en el mapa
                        setMapMarker(latLng);
                        map.setCenter(latLng);
                    } else {
                        alert("No se encontraron resultados.");
                    }
                } else {
                    alert("Geocoder falló debido a: " + status);
                }
            });
        }
    </script>
}

<style>
    .main-container {
        display: flex;
        height: 100vh; /* Asegura que no sea más alto que la ventana */
        overflow: hidden; /* Evita que los elementos internos sobrepasen la ventana */
    }

    .side-panel {
        width: 300px;
        background-color: dimgray;
        padding: 20px;
        box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.5);
        z-index: 2;
        overflow-y: auto;
    }

    .side-panel-content {
        color: white;
    }

    .map-container {
        flex-grow: 1;
        overflow: hidden; /* Previene que el mapa crezca fuera de la vista */
    }

    #map {
        width: 100%;
        height: 100vh;
        max-height: 100vh; /* Limita la altura del mapa para que no sobrepase la ventana */
    }
</style>
